manifest {
  name = 'eQTLGenImpute'
  author = 'Urmo VÃµsa'
  homePage = 'https://gitlab.com/eqtlgen-group/eqtlgen-imputation-pipeline'
  description = 'Genotype imputation pipeline for eQTLGen consortium'
  mainScript = 'eQTLGenImpute.nf'
  nextflowVersion = '>=19.10.0'
  version = '0.3'
}

params {
  outdir = './results'
  custom_config_version = 'master'
  tracedir = "${params.outdir}/pipeline_info"
  harmonise_genotypes = true

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

//Define Docker/Singularity container
process.container = 'quay.io/eqtlgen/eqtlgenimpute:v0.2'

includeConfig 'conf/base.config'

profiles {
  slurm { includeConfig 'conf/slurm.config' }
  pbs { includeConfig 'conf/pbs.config' }
  sge { includeConfig 'conf/sge.config' }
  local_vm { includeConfig 'conf/local_vm.config' }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.cacheDir = "$baseDir/singularity_img/"
  }
}

// Set singularity and nextflow cachedirs for task execution environments
// env.SINGULARITY_CACHEDIR=''
// env.NXF_HOME=''

// Set TMPDIR (important! do not alter!)
env.TMPDIR='.'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/imputation_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/imputation_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/imputation_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/imputation_dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
