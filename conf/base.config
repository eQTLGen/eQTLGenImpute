/*
 * -------------------------------------------------
 *  eQTLGen/eqtlgenimpute Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  // NOTE - Only one of the labels below are used in the fastqc process in the main script.
  //        If possible, it would be nice to keep the same label naming convention when
  //        adding in your processes.
  // TODO nf-core: Customise requirements for specific processes.
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }

  withName: crossmap {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: harmonize_hg38 {
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }

  withName: plink_to_vcf {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: vcf_fixref_hg38 {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }

  withName: filter_preimpute_vcf {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: calculate_missingness {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: split_by_chr {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: eagle_prephasing {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 32.h * task.attempt, 'time' ) }
  }

  withName: filter_samples {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: minimac_imputation {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: filter_maf {
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: extract_maf_ref {
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: extract_maf_target {
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: compare_MAF {
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

}
